# name: CI

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build-test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install pytest
#           pip install httpx

#       - name: Run tests
#         run: |
#           export PYTHONPATH=.
#           pytest tests/

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install httpx
          pip install "dvc[gdrive]"

      - name: Configure DVC to use GDrive service account
        env:
          GDRIVE_CREDENTIALS: ${{ secrets.GDRIVE_CREDENTIALS }}
        run: |
          echo "$GDRIVE_CREDENTIALS" > gdrive-service-account.json
          dvc remote modify gdrive-remote gdrive_use_service_account true
          dvc remote modify gdrive-remote gdrive_service_account_json_file_path gdrive-service-account.json

      - name: Pull dataset and model with DVC
        run: dvc pull -v

      - name: Set PYTHONPATH and run tests
        run: |
          export PYTHONPATH=.
          pytest tests/
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ml-fastapi-app:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ml-fastapi-app:latest

